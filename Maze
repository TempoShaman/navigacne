from tkinter import *
import csv
import pandas as pd








class Cell():
    FILLED_COLOR_BG = "black"
    EMPTY_COLOR_BG = "white"
    ROBOT_COLOR = "red"
    FILLED_COLOR_BORDER = "black"
    EMPTY_COLOR_BORDER = "black"

    def __init__(self, master, x, y, size, fill):
        """ Constructor of the object called by Cell(...) """
        self.master = master
        self.abs = x
        self.ord = y
        self.size= size
        self.fill= fill

    def _switch(self):
        """ Switch if the cell is filled or not. """
        self.fill= not self.fill

    def draw2(self):
        """ vykreslenie robota """
        if self.master != None :
            fill = Cell.ROBOT_COLOR
            outline = Cell.FILLED_COLOR_BORDER



            xmin = self.abs * self.size
            xmax = xmin + self.size
            ymin = self.ord * self.size
            ymax = ymin + self.size

            self.master.create_rectangle(xmin, ymin, xmax, ymax, fill = fill, outline = outline)

    def draw(self):
        """ order to the cell to draw its representation on the canvas """
        if self.master != None :
            fill = Cell.FILLED_COLOR_BG
            outline = Cell.FILLED_COLOR_BORDER

            if not self.fill:
                fill = Cell.EMPTY_COLOR_BG
                outline = Cell.EMPTY_COLOR_BORDER

            xmin = self.abs * self.size
            xmax = xmin + self.size
            ymin = self.ord * self.size
            ymax = ymin + self.size

            self.master.create_rectangle(xmin, ymin, xmax, ymax, fill = fill, outline = outline)

class CellGrid(Canvas):
    def __init__(self,master, rowNumber, columnNumber, cellSize, map, *args, **kwargs):
        Canvas.__init__(self, master, width = cellSize * columnNumber , height = cellSize * rowNumber, *args, **kwargs)



        self.cellSize = cellSize

        self.grid = []



        for row in range(rowNumber):

            line = []
            for column in range(columnNumber):
                if map[row, column] == 0:
                    line.append(Cell(self, column, row, cellSize, False))
                else:
                    line.append(Cell(self, column, row, cellSize, True))
            self.grid.append(line)

        #memorize the cells that have been modified to avoid many switching of state during mouse motion.
        self.switched = []

        # bind click action
        self.bind("<Button-2>", self.handleMouseClick2)

        #bind click action
        self.bind("<Button-1>", self.handleMouseClick)
        #bind moving while clicking
        self.bind("<B1-Motion>", self.handleMouseMotion)
        #bind release button action - clear the memory of midified cells.
        self.bind("<ButtonRelease-1>", lambda event: self.switched.clear())

        self.draw()


    def draw2(self):
        for row in self.grid:
            for cell in row:
                cell.draw2()

    def draw(self):
        for row in self.grid:
            for cell in row:
                cell.draw()

    def _eventCoords(self, event):
        row = int(event.y / self.cellSize)
        column = int(event.x / self.cellSize)
        return row, column

    def handleMouseClick2(self, event):
        row, column = self._eventCoords(event)
        cell = self.grid[row][column]
        cell._switch()
        cell.draw2()
        #add the cell to the list of cell switched during the click
        self.switched.append(cell)

    def handleMouseClick(self, event):
        row, column = self._eventCoords(event)
        cell = self.grid[row][column]
        cell._switch()
        cell.draw()
        #add the cell to the list of cell switched during the click
        self.switched.append(cell)

    def handleMouseMotion(self, event):
        row, column = self._eventCoords(event)
        cell = self.grid[row][column]

        if cell not in self.switched:
            cell._switch()
            cell.draw()
            self.switched.append(cell)


if __name__ == "__main__" :
    app = Tk()
    df = pd.read_csv(
        "/home/oliver/Documents/map.csv")  # read the csv file (put 'r' before the path string to address any special characters in the path, such as '\'). Don't forget to put the file name at the end of the path + ".csv"
    print(df)
    df = df.astype(int)
    df = df.to_numpy()
    a = df.shape[0]
    b = df.shape[1]
    c = df.size

    grid = CellGrid(app, a, b, 25, df)
    grid.pack()

    app.mainloop()
